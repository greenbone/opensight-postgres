name: Push and compare postgres

# This workflow is required to upgrade several postgres versions from the push-scheduled workflow.

on:
  workflow_call:
    inputs:
      postgres-major-version:
        description: "Postgres major version to release."
        type: string
        required: true
      services:
        description: "Json list with postgres services to upgrade."
        type: string
        required: true
    secrets:
      COSIGN_KEY_OPENSIGHT:
        required: true
      COSIGN_KEY_PASSWORD_OPENSIGHT:
        required: true
      GREENBONE_BOT_TOKEN:
        required: true

jobs:
  compare:
    runs-on: self-hosted-generic
    steps:
      - name: Compare postgres annotation org.opencontainers.image.created
        id: compare
        uses: greenbone/actions/oci-info@v3
        with:
          command: compare-tag-annotation
          reg-domain: ${{ vars.GREENBONE_REGISTRY }}
          reg-auth-domain: "${{ vars.GREENBONE_REGISTRY }}/service"
          reg-auth-service: harbor-registry
          user: ${{ secrets.GREENBONE_REGISTRY_USER }}
          password: ${{ secrets.GREENBONE_REGISTRY_TOKEN }}
          repository: opensight-postgres
          namespace: opensight-dev
          compare-repository: postgres
          tag: ${{ inputs.postgres-major-version }}
          mode: lt

      - name: Get dockerhub postgres service tags
        if: ${{ steps.compare.outputs.output == 'true' }}
        id: dtags
        uses: greenbone/actions/oci-info@v3
        with:
          repository: postgres
          namespace: library
          reg-domain: registry-1.docker.io
          reg-auth-domain: auth.docker.io
          reg-auth-service: registry.docker.io

      - name: Get opensight-postgres service tags
        if: ${{ steps.compare.outputs.output == 'true' }}
        id: tags
        uses: greenbone/actions/oci-info@v3
        with:
          reg-domain: ${{ vars.GREENBONE_REGISTRY }}
          reg-auth-domain: "${{ vars.GREENBONE_REGISTRY }}/service"
          reg-auth-service: harbor-registry
          user: ${{ secrets.GREENBONE_REGISTRY_USER }}
          password: ${{ secrets.GREENBONE_REGISTRY_TOKEN }}
          repository: opensight-postgres
          namespace: opensight-dev

      - name: Increment opensight-postgres service version
        if: ${{ steps.compare.outputs.output == 'true' }}
        id: version
        shell: bash
        run: |
          set +e
          # Get latest postgres minor version from dockerhub filtered by major version.
          dt="$(echo -e '${{ steps.dtags.outputs.output }}' | grep -E '^${{ inputs.postgres-major-version }}.[0-9]+$' | sort -Vr | sed q)"
          echo "Current postgres version on dockerhub: $dt"
          if ! [ "$dt" ]; then
            echo 'No postgres release on dockerhub found for major version: ${{ inputs.postgres-major-version }}'
            exit 1
          fi

          IFS='.' read -r -a dv <<< "$dt"
          minor="${dv[1]}"
          if ! [ "$minor" ]; then
            echo "No postgres minor version found on dockerhub: $dt"
            exit 2
          fi
          
          # Get the latest opensight-postgres tag filtered by dockerhub postgres minor version.
          t="$(echo -e '${{ steps.tags.outputs.output }}' | grep -E "^${{ inputs.postgres-major-version }}.$minor.[0-9]+$" | sort -Vr | sed q)"
          if [ "$t" ]; then
            echo "Current opensight-postgres version: $t"
            # Increment patch level
            IFS='.' read -r -a v <<< "$t"
            if ! [ -v v[2] ]; then
              echo "No patch level found in opensearch-postgres version: $t"
              exit 3
            fi
            patch=$((v[2] + 1))
            version="${{ inputs.postgres-major-version }}.$minor.$patch"
          else
            echo "New minor postgres version found on dockerhub: ${{ inputs.postgres-major-version }}.$minor"
            version="${{ inputs.postgres-major-version }}.$minor.0"
          fi

          echo "New opensight-postgres version: $version"
          echo "output=$version" >> $GITHUB_OUTPUT

    outputs:
      compare: ${{ steps.compare.outputs.output }}
      version: ${{ steps.version.outputs.output }}

  push-postgres:
    needs: compare
    if: ${{ needs.compare.outputs.compare == 'true' }}
    uses: ./.github/workflows/push.yml
    with:
      postgres-major-version: ${{ inputs.postgres-major-version }}
      services: ${{ inputs.services }}
      version: ${{ needs.compare.outputs.version }}
    secrets: inherit
